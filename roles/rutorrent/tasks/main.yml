---
# ruTorrent role
- name: "Get {{user}} uid"
  shell: "id -u {{user}}"
  register: uid

- name: "Get {{user}} gid"
  shell: "id -g {{user}}"
  register: gid

- name: Install necessary pip module for htpasswd
  pip: "name={{item}} state=latest executable=pip3"
  with_items:
    - passlib

- name: Create rutorrent directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - "{{dirs.data}}/rutorrent"

- name: Stop and remove any existing container
  docker_container:
    name: rutorrent
    state: absent

- name: Create rutorrent download directory
  file: "path={{rutorrent.downloads}} state=directory mode=0775 owner={{user}} group={{user}}"

- name: Create rutorrent torrent watch directory
  file: "path={{rutorrent.downloads}}/watched state=directory mode=0775 owner={{user}} group={{user}}"

# - name: "Set {{rutorrent.downloads}} permissions"
#   shell: "chmod -R 775 {{rutorrent.downloads}}"
# 
# - name: "Set {{rutorrent.downloads}} owner"
#   shell: "chown -R {{user}}:{{user}} {{rutorrent.downloads}}"

- name: Check rtorrent.rc exists
  stat:
    path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
  register: rtorrent_rc

- name: Create and start container
  docker_container:
    name: rutorrent
    image: linuxserver/rutorrent
    pull: yes
    published_ports:
      - "3111:80/tcp"
      - "5000:5000/tcp"
      - "51413:51413/tcp"
      - "6881:6881/udp"
    labels:
      com.centurylinklabs.watchtower.enable: "true"
    env:
      PUID: "{{uid.stdout}}"
      PGID: "{{gid.stdout}}"
      VIRTUAL_HOST: "rutorrent.{{domain}}"
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: "rutorrent.{{domain}}"
      LETSENCRYPT_EMAIL: "{{email}}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{dirs.data}}/rutorrent:/config"
      - "{{rutorrent.downloads}}:/downloads"
#       - "/mnt:/mnt"
#       - "/opt/scripts/torrent:/scripts"
    networks:
      - name: tierbox
        aliases:
          - rutorrent
    restart_policy: always
    state: started

# - name: Create and start container
#   docker_container:
#     name: rutorrent
#     image: horjulf/rutorrent-autodl
#     pull: yes
#     published_ports:
#       - "3111:80/tcp"
#       - "51413:51413"
#       - "6881:6881/udp"
#     labels:
#       com.centurylinklabs.watchtower.enable: "true"
#     env:
#       PUID: "{{uid.stdout}}"
#       PGID: "{{gid.stdout}}"
#       VIRTUAL_HOST: "rutorrent.{{domain}}"
#       VIRTUAL_PORT: 80
#       LETSENCRYPT_HOST: "rutorrent.{{domain}}"
#       LETSENCRYPT_EMAIL: "{{email}}"
#     volumes:
#       - "/etc/localtime:/etc/localtime:ro"
#       - "{{dirs.data}}/rutorrent:/config"
#       - "{{rutorrent.downloads}}:/downloads"
# #       - "/mnt:/mnt"
# #       - "/opt/scripts/torrent:/scripts"
#     networks:
#       - name: tierbox
#         aliases:
#           - rutorrent
#     restart_policy: always
#     state: started

- name: Wait for rtorrent.rc to be created
  wait_for:
    path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Wait for php.ini to be created
  wait_for:
    path: "{{dirs.data}}/rutorrent/php/php.ini"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Wait for nginx.conf to be created
  wait_for:
    path: "{{dirs.data}}/rutorrent/nginx/nginx.conf"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: "Wait for 10 seconds before stopping rutorrent container"
  wait_for:
    timeout: 10
  when: rtorrent_rc.stat.exists == False

- name: Stop container to customize rtorrent.rc
  docker_container:
    name: rutorrent
    state: stopped
  when: rtorrent_rc.stat.exists == False

# - name: Change downloads directory
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^directory\s?='
#     line: 'directory = /downloads'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Disable DHT
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^dht\s?='
#     line: 'dht = disable'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Disable PEX
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^peer_exchange\s?='
#     line: 'peer_exchange = no'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Reduce min_peers
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^min_peers\s?='
#     line: 'min_peers = 1'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Increase max_uploads
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^max_uploads\s?='
#     line: 'max_uploads = 1024'
#     state: present
#   when: rtorrent_rc.stat.exists == False

# - name: Disable check_hash
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^check_hash\s?='
#     line: 'check_hash = no'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set upload_rate to unlimited
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^upload_rate\s?='
#     line: 'upload_rate = 0'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set download_rate to unlimited
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^download_rate\s?='
#     line: 'download_rate = 0'
#     state: present
#   when: rtorrent_rc.stat.exists == False

# - name: Set global upload_rate to unlimited
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^throttle.global_up.max_rate.set_kb\s?='
#     line: 'throttle.global_up.max_rate.set_kb = 0'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set global download_rate to unlimited
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^throttle.global_down.max_rate.set_kb\s?='
#     line: 'throttle.global_down.max_rate.set_kb = 0'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set max_open_files to 1024
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^network.max_open_files.set\s?='
#     line: 'network.max_open_files.set = 1024'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set encryption parameters
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^encryption\s?='
#     line: 'encryption = allow_incoming,enable_retry,prefer_plaintext'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set max_downloads_global to 1024
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^max_downloads_global\s?='
#     line: 'max_downloads_global = 1024'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set max_uploads_global to 1024
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^max_uploads_global\s?='
#     line: 'max_uploads_global = 1024'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set file_allocate to no
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^system.file_allocate.set\s?='
#     line: 'system.file_allocate.set = no'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Set upload_max_filesize to 8M
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/php/php.ini"
#     regexp: '^upload_max_filesize\s?='
#     line: 'upload_max_filesize = 8M'
#     state: present
#   when: rtorrent_rc.stat.exists == False

# - name: Configure watch folder interval
#   lineinfile:
#     path: "{{dirs.data}}/rutorrent/rtorrent/rtorrent.rc"
#     regexp: '^schedule\s?='
#     line: 'schedule = watch_directory_1,5,5,"load.start=/downloads/watched/*.torrent"'
#     state: present
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Copy across custom nginx.conf with htpasswd support
#   copy:
#     src: nginx.conf
#     dest: "{{dirs.data}}/rutorrent/nginx/nginx.conf"
#     owner: "{{user}}"
#     group: "{{user}}"
#     mode: 0775
#     force: yes
#   when: rtorrent_rc.stat.exists == False
# 
# - name: Create htpasswd
#   htpasswd:
#     path: "{{dirs.data}}/rutorrent/nginx/.htpasswd"
#     name: "{{user}}"
#     password: "{{rutorrent.passwd}}"
#     owner: "{{user}}"
#     group: "{{user}}"
#     mode: 0775
#   when: rtorrent_rc.stat.exists == False

- name: Start container to apply changes
  docker_container:
    name: rutorrent
    state: started
  when: rtorrent_rc.stat.exists == False
